# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Paul Ramsey | Mark Leslie
# This file is distributed under the same license as the Introduction to PostGIS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Introduction to PostGIS 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-13 19:01-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../en/geography.rst:4
msgid "Geography"
msgstr ""

#: ../../en/geography.rst:6
msgid "It is very common to have data in which the coordinate are \"geographics\" or \"latitude/longitude\"."
msgstr ""

#: ../../en/geography.rst:8
msgid "Unlike coordinates in Mercator, UTM, or Stateplane, geographic coordinates are **not Cartesian coordinates**. Geographic coordinates do not represent a linear distance from an origin as plotted on a plane.  Rather, these **spherical coordinates** describe angular coordinates on a globe. In spherical coordinates a point is specified by the angle of rotation from a reference meridian (longitude), and the angle from the equator (latitude)."
msgstr ""

#: ../../en/geography.rst:13
msgid "You can treat geographic coordinates as approximate Cartesian coordinates and continue to do spatial calculations. However, measurements of distance, length and area will be **nonsensical**. Since spherical coordinates measure **angular** distance, the units are in \"degrees.\" Further, the approximate results from indexes and true/false tests like intersects and contains can become terribly wrong. The distance between points get larger as problem areas like the poles or the international dateline are approached."
msgstr ""

#: ../../en/geography.rst:15
msgid "For example, here are the coordinates of Los Angeles and Paris."
msgstr ""

#: ../../en/geography.rst:17
msgid "Los Angeles: ``POINT(-118.4079 33.9434)``"
msgstr ""

#: ../../en/geography.rst:18
msgid "Paris: ``POINT(2.3490 48.8533)``"
msgstr ""

#: ../../en/geography.rst:20
msgid "The following calculates the distance between Los Angeles and Paris using the standard PostGIS Cartesian :command:`ST_Distance(geometry, geometry)`.  Note that the SRID of 4326 declares a geographic spatial reference system."
msgstr ""

#: ../../en/geography.rst:33
msgid "Aha! 122! But, what does that mean?"
msgstr ""

#: ../../en/geography.rst:35
msgid "The units for spatial reference 4326 are degrees. So our answer is 122 degrees. But (again), what does that mean?"
msgstr ""

#: ../../en/geography.rst:37
msgid "On a sphere, the size of one \"degree square\" is quite variable, becoming smaller as you move away from the equator. Think of the meridians (vertical lines) on the globe getting closer to each other as you go towards the poles. So, a distance of 122 degrees doesn't *mean* anything. It is a nonsense number."
msgstr ""

#: ../../en/geography.rst:39
msgid "In order to calculate a meaningful distance, we must treat geographic coordinates not as approximate Cartesian coordinates but rather as true spherical coordinates.  We must measure the distances between points as true paths over a sphere -- a portion of a great circle."
msgstr ""

#: ../../en/geography.rst:41
msgid "PostGIS provides this functionality through the ``geography`` type."
msgstr ""

#: ../../en/geography.rst:45
msgid "Different spatial databases have different approaches for \"handling geographics\""
msgstr ""

#: ../../en/geography.rst:47
msgid "Oracle attempts to paper over the differences by transparently doing geographic calculations when the SRID is geographic."
msgstr ""

#: ../../en/geography.rst:48
msgid "SQL Server uses two spatial types, \"STGeometry\" for Cartesian data and \"STGeography\" for geographics."
msgstr ""

#: ../../en/geography.rst:49
msgid "Informix Spatial is a pure Cartesian extension to Informix, while Informix Geodetic is a pure geographic extension."
msgstr ""

#: ../../en/geography.rst:50
msgid "Similar to SQL Server, PostGIS uses two types, \"geometry\" and \"geography\"."
msgstr ""

#: ../../en/geography.rst:52
msgid "Using the ``geography`` instead of ``geometry`` type, let's try again to measure the distance between Los Angeles and Paris."
msgstr ""

#: ../../en/geography.rst:65
msgid "A big number! All return values from ``geography`` calculations are in **meters**, so our answer is 9125km."
msgstr ""

#: ../../en/geography.rst:67
msgid "Older versions of PostGIS supported very basic calculations over the sphere using the :command:`ST_Distance_Spheroid(point, point, measurement)` function. However, :command:`ST_Distance_Spheroid` is substantially limited. The function only works on points and provides no support for indexing across the poles or international dateline."
msgstr ""

#: ../../en/geography.rst:69
msgid "The need to support non-point geometries becomes very clear when posing a question like \"How close will a flight from Los Angeles to Paris come to Iceland?\""
msgstr ""

#: ../../en/geography.rst:73
msgid "Working with geographic coordinates on a Cartesian plane (the purple line) yields a *very* wrong answer indeed! Using great circle routes (the red lines) gives the right answer. If we convert our LAX-CDG flight into a line string and calculate the distance to a point in Iceland using ``geography`` we'll get the right answer (recall) in meters."
msgstr ""

#: ../../en/geography.rst:86
msgid "So the closest approach to Iceland (as measured from its international airport) on the LAX-CDG route is a relatively small 502km."
msgstr ""

#: ../../en/geography.rst:88
msgid "The Cartesian approach to handling geographic coordinates breaks down entirely for features that cross the international dateline. The shortest great-circle route from Los Angeles to Tokyo crosses the Pacific Ocean. The shortest Cartesian route crosses the Atlantic and Indian Oceans."
msgstr ""

#: ../../en/geography.rst:111
msgid "Using Geography"
msgstr ""

#: ../../en/geography.rst:113
msgid "In order to load geometry data into a geography table, the geometry first needs to be projected into EPSG:4326 (longitude/latitude), then it needs to be changed into geography.  The :command:`ST_Transform(geometry,srid)` function converts coordinates to geographics and the :command:`Geography(geometry)` function or the ``::geography`` suffix \"casts\" to geography."
msgstr ""

#: ../../en/geography.rst:124
msgid "Building a spatial index on a geography table is exactly the same as for geometry:"
msgstr ""

#: ../../en/geography.rst:131
msgid "The difference is under the covers: the geography index will correctly handle queries that cover the poles or the international date-line, while the geometry one will not."
msgstr ""

#: ../../en/geography.rst:133
msgid "Here's a query to find all the subway stations within 500 meters of the Empire State Building."
msgstr ""

#: ../../en/geography.rst:148
msgid "There are only a small number of native functions for the geography type:"
msgstr ""

#: ../../en/geography.rst:150
msgid ":command:`ST_AsText(geography)` returns ``text``"
msgstr ""

#: ../../en/geography.rst:151
msgid ":command:`ST_GeographyFromText(text)` returns ``geography``"
msgstr ""

#: ../../en/geography.rst:152
msgid ":command:`ST_AsBinary(geography)` returns ``bytea``"
msgstr ""

#: ../../en/geography.rst:153
msgid ":command:`ST_GeogFromWKB(bytea)` returns ``geography``"
msgstr ""

#: ../../en/geography.rst:154
msgid ":command:`ST_AsSVG(geography)` returns ``text``"
msgstr ""

#: ../../en/geography.rst:155
msgid ":command:`ST_AsGML(geography)` returns ``text``"
msgstr ""

#: ../../en/geography.rst:156
msgid ":command:`ST_AsKML(geography)` returns ``text``"
msgstr ""

#: ../../en/geography.rst:157
msgid ":command:`ST_AsGeoJson(geography)` returns ``text``"
msgstr ""

#: ../../en/geography.rst:158
msgid ":command:`ST_Distance(geography, geography)` returns ``double``"
msgstr ""

#: ../../en/geography.rst:159
msgid ":command:`ST_DWithin(geography, geography, float8)` returns ``boolean``"
msgstr ""

#: ../../en/geography.rst:160
msgid ":command:`ST_Area(geography)` returns ``double``"
msgstr ""

#: ../../en/geography.rst:161
msgid ":command:`ST_Length(geography)` returns ``double``"
msgstr ""

#: ../../en/geography.rst:162
msgid ":command:`ST_Covers(geography, geography)` returns ``boolean``"
msgstr ""

#: ../../en/geography.rst:163
msgid ":command:`ST_CoveredBy(geography, geography)` returns ``boolean``"
msgstr ""

#: ../../en/geography.rst:164
msgid ":command:`ST_Intersects(geography, geography)` returns ``boolean``"
msgstr ""

#: ../../en/geography.rst:165
msgid ":command:`ST_Buffer(geography, float8)` returns ``geography`` [#Casting_note]_"
msgstr ""

#: ../../en/geography.rst:166
msgid ":command:`ST_Intersection(geography, geography)` returns ``geography`` [#Casting_note]_"
msgstr ""

#: ../../en/geography.rst:169
msgid "Creating a Geography Table"
msgstr ""

#: ../../en/geography.rst:171
msgid "The SQL for creating a new table with a geography column is much like that for creating a geometry table. However, geography includes the ability to specify the object type directly at the time of table creation. For example:"
msgstr ""

#: ../../en/geography.rst:187
msgid "In the table definition, the ``GEOGRAPHY(Point)`` specifies our airport data type as points. The new geography fields don't get registered in the ``geometry_columns`` view. Instead, they are registered in a view called ``geography_columns``."
msgstr ""

#: ../../en/geography.rst:200
msgid "Some columns were omitted from the above output."
msgstr ""

#: ../../en/geography.rst:203
msgid "Casting to Geometry"
msgstr ""

#: ../../en/geography.rst:205
msgid "While the basic functions for geography types can handle many use cases, there are times when you might need access to other functions only supported by the geometry type. Fortunately, you can convert objects back and forth from geography to geometry."
msgstr ""

#: ../../en/geography.rst:207
msgid "The PostgreSQL syntax convention for casting is to append ``::typename`` to the end of the value you wish to cast. So, ``2::text`` with convert a numeric two to a text string '2'. And ``'POINT(0 0)'::geometry`` will convert the text representation of point into a geometry point."
msgstr ""

#: ../../en/geography.rst:209
msgid "The :command:`ST_X(point)` function only supports the geometry type. How can we read the X coordinate from our geographies?"
msgstr ""

#: ../../en/geography.rst:223
msgid "By appending ``::geometry`` to our geography value, we convert the object to a geometry with an SRID of 4326. From there we can use as many geometry functions as strike our fancy. But, remember -- now that our object is a geometry, the coordinates will be interpretted as Cartesian coordinates, not spherical ones."
msgstr ""

#: ../../en/geography.rst:227
msgid "Why (Not) Use Geography"
msgstr ""

#: ../../en/geography.rst:229
msgid "Geographics are universally accepted coordinates -- everyone understands what latitude/longitude mean, but very few people understand what UTM coordinates mean. Why not use geography all the time?"
msgstr ""

#: ../../en/geography.rst:231
msgid "First, as noted earlier, there are far fewer functions available (right now) that directly support the geography type. You may spend a lot of time working around geography type limitations."
msgstr ""

#: ../../en/geography.rst:232
msgid "Second, the calculations on a sphere are computationally far more expensive than Cartesian calculations. For example, the Cartesian formula for distance (Pythagoras) involves one call to sqrt(). The spherical formula for distance (Haversine) involves two sqrt() calls, an arctan() call, four sin() calls and two cos() calls. Trigonometric functions are very costly, and spherical calculations involve a lot of them."
msgstr ""

#: ../../en/geography.rst:234
msgid "The conclusion?"
msgstr ""

#: ../../en/geography.rst:236
msgid "**If your data is geographically compact** (contained within a state, county or city), **use the geometry type with a Cartesian projection** that makes sense with your data. See the http://epsg.io site and type in the name of your region for a selection of possible reference systems."
msgstr ""

#: ../../en/geography.rst:238
msgid "**If you need to measure distance with a dataset that is geographically dispersed** (covering much of the world), **use the geography type.** The application complexity you save by working in ``geography`` will offset any performance issues. And casting to ``geometry`` can offset most functionality limitations."
msgstr ""

#: ../../en/geography.rst:241
msgid "Function List"
msgstr ""

#: ../../en/geography.rst:243
msgid "`ST_Distance(geometry, geometry) <http://postgis.net/docs/ST_Distance.html>`_: For geometry type Returns the 2-dimensional Cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters."
msgstr ""

#: ../../en/geography.rst:245
msgid "`ST_GeographyFromText(text) <http://postgis.net/docs/ST_GeographyFromText.html>`_: Returns a specified geography value from Well-Known Text representation or extended (WKT)."
msgstr ""

#: ../../en/geography.rst:247
msgid "`ST_Transform(geometry, srid) <http://postgis.net/docs/ST_Transform.html>`_: Returns a new geometry with its coordinates transformed to the SRID referenced by the integer parameter."
msgstr ""

#: ../../en/geography.rst:249
msgid "`ST_X(point) <http://postgis.net/docs/ST_X.html>`_: Returns the X coordinate of the point, or NULL if not available. Input must be a point."
msgstr ""

#: ../../en/geography.rst:251
msgid "`ST_Azimuth(geography_A, geography_B) <http://postgis.net/docs/ST_Azimuth.html>`_: Returns the direction from A to B in radians."
msgstr ""

#: ../../en/geography.rst:253
msgid "`ST_DWithin(geography_A, geography_B, R) <http://postgis.net/docs/ST_DWithin.html>`_: Returns true if A is within R meters of B."
msgstr ""

#: ../../en/geography.rst:257
msgid "Footnotes"
msgstr ""

#: ../../en/geography.rst:258
msgid "The buffer and intersection functions are actually wrappers on top of a cast to geometry, and are not carried out natively in spherical coordinates. As a result, they may fail to return correct results for objects with very large extents that cannot be cleanly converted to a planar representation."
msgstr ""

#: ../../en/geography.rst:260
msgid "For example, the :command:`ST_Buffer(geography,distance)` function transforms the geography object into a \"best\" projection, buffers it, and then transforms it back to geographics. If there is no \"best\" projection (the object is too large), the operation can fail or return a malformed buffer."
msgstr ""
