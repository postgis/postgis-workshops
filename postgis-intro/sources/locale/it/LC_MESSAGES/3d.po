# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Paul Ramsey | Mark Leslie
# This file is distributed under the same license as the Introduction to PostGIS package.
# robe <regina@arrival3d.com>, 2022.
msgid ""
msgstr ""
"Project-Id-Version: Introduction to PostGIS 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-13 19:01-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../en/3d.rst:4
msgid "3-D"
msgstr ""

#: ../../en/3d.rst:7
msgid "3-D Geometries"
msgstr ""

#: ../../en/3d.rst:9
msgid "So far, we have been working with 2-D geometries, with only X and Y coordinates. But PostGIS supports additional dimensions on all geometry types, a \"Z\" dimension to add height information and a \"M\" dimension for additional dimensional information (commonly time, or road-mile, or upstream-distance information) for each coordinate."
msgstr ""

#: ../../en/3d.rst:11
msgid "For 3-D and 4-D geometries, the extra dimensions are added as extra coordinates for each vertex in the geometry, and the geometry type is enhanced to indicate how to interpret the extra dimensions. Adding the extra dimensions results in three extra possible geometry types for each geometry primitive:"
msgstr ""

#: ../../en/3d.rst:13
msgid "Point (a 2-D type) is joined by PointZ, PointM and PointZM types."
msgstr ""

#: ../../en/3d.rst:14
msgid "Linestring (a 2-D type) is joined by LinestringZ, LinestringM and LinestringZM types."
msgstr ""

#: ../../en/3d.rst:15
msgid "Polygon (a 2-D type) is joined by PolygonZ, PolygonM and PolygonZM types."
msgstr ""

#: ../../en/3d.rst:16
msgid "And so on."
msgstr ""

#: ../../en/3d.rst:18
msgid "For well-known text (:term:`WKT`) representation, the format for higher dimensional geometries is given by the ISO SQL/MM specification. The extra dimensionality information is simply added to the text string after the type name, and the extra coordinates added after the X/Y information. For example:"
msgstr ""

#: ../../en/3d.rst:20
msgid "POINT ZM (1 2 3 4)"
msgstr ""

#: ../../en/3d.rst:21
msgid "LINESTRING M (1 1 0, 1 2 0, 1 3 1, 2 2 0)"
msgstr ""

#: ../../en/3d.rst:22
msgid "POLYGON Z ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))"
msgstr ""

#: ../../en/3d.rst:24
msgid "The ST_AsText() function will return the above representations when dealing with 3-D and 4-D geometries."
msgstr ""

#: ../../en/3d.rst:26
msgid "For well-known binary (:term:`WKB`) representation, the format for higher dimensional geometries is given by the ISO SQL/MM specification. The BNF form of the format is available from https://git.osgeo.org/gitea/postgis/postgis/src/branch/master/doc/bnf-wkb.txt."
msgstr ""

#: ../../en/3d.rst:28
msgid "In addition to higher-dimensional forms of the standard types, PostGIS includes a few new types that make sense in a 3-D space:"
msgstr ""

#: ../../en/3d.rst:30
msgid "The TIN type allows you to model triangular meshes as rows in your database."
msgstr ""

#: ../../en/3d.rst:31
msgid "The POLYHEDRALSURFACE allows you to model volumetric objects in your database."
msgstr ""

#: ../../en/3d.rst:33
msgid "Since both these types are for modelling 3-D objects, it only really makes sense to use the Z variants.  An example of a POLYHEDRALSURFACE Z would be the 1 unit cube:"
msgstr ""

#: ../../en/3d.rst:48
msgid "3-D Functions"
msgstr ""

#: ../../en/3d.rst:50
msgid "There are a number of functions built to calculate relationships between 3-D objects:"
msgstr ""

#: ../../en/3d.rst:52
msgid "ST_3DClosestPoint — Returns the 3-dimensional point on g1 that is closest to g2. This is the first point of the 3D shortest line."
msgstr ""

#: ../../en/3d.rst:53
msgid "ST_3DDistance — For geometry type Returns the 3-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units."
msgstr ""

#: ../../en/3d.rst:54
msgid "ST_3DDWithin — For 3d (z) geometry type Returns true if two geometries 3d distance is within number of units."
msgstr ""

#: ../../en/3d.rst:55
msgid "ST_3DDFullyWithin — Returns true if all of the 3D geometries are within the specified distance of one another."
msgstr ""

#: ../../en/3d.rst:56
msgid "ST_3DIntersects — Returns TRUE if the Geometries \"spatially intersect\" in 3d - only for points and linestrings"
msgstr ""

#: ../../en/3d.rst:57
msgid "ST_3DLongestLine — Returns the 3-dimensional longest line between two geometries"
msgstr ""

#: ../../en/3d.rst:58
msgid "ST_3DMaxDistance — For geometry type Returns the 3-dimensional cartesian maximum distance (based on spatial ref) between two geometries in projected units."
msgstr ""

#: ../../en/3d.rst:59
msgid "ST_3DShortestLine — Returns the 3-dimensional shortest line between two geometries"
msgstr ""

#: ../../en/3d.rst:61
msgid "For example, we can calculate the distance between our unit cube and a point using the ST_3DDistance function:"
msgstr ""

#: ../../en/3d.rst:89
msgid "N-D Indexes"
msgstr ""

#: ../../en/3d.rst:91
msgid "Once you have data in higher dimensions it may make sense to index it. However, you should think carefully about the distribution of your data in all dimensions before applying a multi-dimensional index."
msgstr ""

#: ../../en/3d.rst:93
msgid "Indexes are only useful when they allow the database to drastically reduce the number of return rows as a result of a WHERE condition. For a higher dimension index to be useful, the data must cover a wide range of that dimension, relative to the kinds of queries you are constructing."
msgstr ""

#: ../../en/3d.rst:95
msgid "A set of DEM points would probably be a *poor* candidate for a 3-D index, since the queries would usually be extracting a 2-D box of points, and rarely attempting to select a Z-slice of points."
msgstr ""

#: ../../en/3d.rst:96
msgid "A set of GPS traces in X/Y/T space might be a *good* candidate for a 3-D index, if the GPS tracks overlapped each other frequently in all dimensions (for example, driving the same route over and over at different times), since there would be large variability in all dimensions of the data set."
msgstr ""

#: ../../en/3d.rst:98
msgid "You can create a multi-dimensional index on data of any dimensionality (even mixed dimensionality). For example, to create a multi-dimensional index on the ``nyc_streets`` table,"
msgstr ""

#: ../../en/3d.rst:105
msgid "The ``gist_geometry_ops_nd`` parameter tells PostGIS to use the N-D index instead of the standard 2-D index."
msgstr ""

#: ../../en/3d.rst:107
msgid "Once you have the index built, you can use it in queries with the ``&&&`` index operator. ``&&&`` has the same semantics as ``&&``, \"bounding boxes interact\", but applies those semantics using all the dimensions of the input geometries. Geometries with mis-matching dimensionality do not interact."
msgstr ""

#: ../../en/3d.rst:123
msgid "To search the ``nyc_streets`` table using the N-D index, just replace the usual ``&&`` 2-D index operator with the ``&&&`` operator."
msgstr ""

#: ../../en/3d.rst:139
msgid "The results should be the same. In general the N-D index is very slightly slower than the 2-D index, so only use the N-D index where you are certain that N-D queries will improve the selectivity of your queries."
msgstr ""
