# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Paul Ramsey | Mark Leslie
# This file is distributed under the same license as the Introduction to
# PostGIS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Introduction to PostGIS 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-13 19:01-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../en/schemas.rst:4
msgid "PostgreSQL Schemas"
msgstr ""

#: ../../en/schemas.rst:6
msgid ""
"Production databases inevitably have a large number of tables and views, and "
"managing them all in one schema can become unwieldy quickly. Fortunately, "
"PostgreSQL_ includes the concept of a \"_Schema\"."
msgstr ""

#: ../../en/schemas.rst:8
msgid ""
"Schemas are like folders, and can hold tables, views, functions, sequences "
"and other relations.  Every database starts out with one schema, the "
"``public`` schema."
msgstr ""

#: ../../en/schemas.rst:12
msgid ""
"Inside that schema, the default install of PostGIS creates the "
"``geometry_columns``, ``geography_columns`` and ``spatial_ref_sys`` metadata "
"relations, as well as all the types and functions used by PostGIS. So users "
"of PostGIS always need access to the public schema."
msgstr ""

#: ../../en/schemas.rst:14
msgid ""
"In the public schema you can also see all the tables we have created so far "
"in the workshop."
msgstr ""

#: ../../en/schemas.rst:18
msgid "Why use Schemas?"
msgstr ""

#: ../../en/schemas.rst:20
msgid "There are two very good reasons for using schemas:"
msgstr ""

#: ../../en/schemas.rst:22
msgid "Data that is managed in a schema is easier to apply bulk actions to."
msgstr ""

#: ../../en/schemas.rst:24
msgid ""
"It's easier to back-up data that's in a separate schema: so volatile data "
"can have a different back-up schedule from non-volatile data."
msgstr ""

#: ../../en/schemas.rst:25
msgid ""
"It's easier to restore data that's in a separate schema: so application-"
"oriented schemas can be separately restored and backed up for time travel "
"and recovery."
msgstr ""

#: ../../en/schemas.rst:26
msgid ""
"It's easier to manage application differences when the application data is "
"in a schema: so a new version of software can work off a table structure in "
"a new schema, and cut-over involves a simple change to the schema name."
msgstr ""

#: ../../en/schemas.rst:28
msgid ""
"Users can be restricted in their work to single schemas to allow isolation "
"of analytical and test tables from production tables."
msgstr ""

#: ../../en/schemas.rst:30
msgid ""
"So for production purposes, keeping your application data separate in "
"schemas improves management; and for user purposes, keeping your users in "
"separate schemas keeps them from treading on each other."
msgstr ""

#: ../../en/schemas.rst:34
msgid "Creating a Data Schema"
msgstr ""

#: ../../en/schemas.rst:36
msgid ""
"Let's create a new schema and move a table into it.  First, create a new "
"schema in the database:"
msgstr ""

#: ../../en/schemas.rst:42
msgid ""
"Next, we will move the ``nyc_census_blocks`` table to the ``census`` schema:"
msgstr ""

#: ../../en/schemas.rst:48
msgid ""
"If you're using the :command:`psql` command-line program, you'll notice that "
"``nyc_census_blocks`` has disappeared from your table listing now! If you're "
"using PgAdmin, you might have to refresh your view to see the new schema and "
"the table inside it."
msgstr ""

#: ../../en/schemas.rst:50
msgid "You can access tables inside schemas in two ways:"
msgstr ""

#: ../../en/schemas.rst:52
msgid "by referencing them using ``schema.table`` notation"
msgstr ""

#: ../../en/schemas.rst:53
msgid "by adding the schema to your ``search_path``"
msgstr ""

#: ../../en/schemas.rst:55
msgid "Explicit referencing is easy, but it gets tiring to type after a while:"
msgstr ""

#: ../../en/schemas.rst:61
msgid ""
"Manipulating the ``search_path`` is a nice way to provide access to tables "
"in multiple schemas without lots of extra typing."
msgstr ""

#: ../../en/schemas.rst:63
msgid "You can set the ``search_path`` at run time using the ``SET`` command:"
msgstr ""

#: ../../en/schemas.rst:69
msgid ""
"This ensures that all references to relations and functions are searched in "
"both the ``census`` and the ``public`` schemas. Remember that all the "
"PostGIS functions and types are in ``public`` so we don't want to drop that "
"from the search path."
msgstr ""

#: ../../en/schemas.rst:71
msgid ""
"Setting the search path every time you connect can get tiring too, but "
"fortunately it's possible to permanently set the search path for a user:"
msgstr ""

#: ../../en/schemas.rst:77
msgid ""
"Now the postgres user will always have the ``census`` schema in their search "
"path."
msgstr ""

#: ../../en/schemas.rst:81
msgid "Creating a User Schema"
msgstr ""

#: ../../en/schemas.rst:83
msgid ""
"Users like to create tables, and PostGIS users do so particularly: analysis "
"operations with SQL demand temporary tables for visualization or interim "
"results, so spatial SQL tends to require that users have CREATE privileges "
"more than ordinary database workloads."
msgstr ""

#: ../../en/schemas.rst:85
msgid ""
"By default, every role in Oracle is given a personal schema. This is a nice "
"practice to use for PostgreSQL users too, and is easy to replicate using "
"PostgreSQL roles, schemas, and search paths."
msgstr ""

#: ../../en/schemas.rst:87
msgid ""
"Create a new user with table creation privileges (see :ref:`security` for "
"information about the ``postgis_writer`` role), then create a schema with "
"that user as the authorization:"
msgstr ""

#: ../../en/schemas.rst:94
msgid ""
"If you log in as that user, you'll find the default ``search_path`` for "
"PostgreSQL is actually this:"
msgstr ""

#: ../../en/schemas.rst:106
msgid ""
"The first schema on the search path us the user's named schema! So now the "
"following conditions exist:"
msgstr ""

#: ../../en/schemas.rst:108
msgid "The user exists, with the ability to create spatial tables."
msgstr ""

#: ../../en/schemas.rst:109
msgid "The user's named schema exists, and the user owns it."
msgstr ""

#: ../../en/schemas.rst:110
msgid ""
"The user's search path has the user schema first, so new tables are "
"automatically created there, and queries automatically search there first."
msgstr ""

#: ../../en/schemas.rst:112
msgid ""
"That's all there is to it, the user's default work area is now nicely "
"separated from any tables in other schemas."
msgstr ""
